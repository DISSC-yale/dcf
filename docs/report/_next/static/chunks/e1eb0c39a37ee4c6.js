(globalThis.TURBOPACK||(globalThis.TURBOPACK=[])).push(["object"==typeof document?document.currentScript:void 0,11992,e=>{"use strict";var t=e.i(3117),r=e.i(72724),a=e.i(46440),i=e.i(99238),n=class extends t.AbstractMermaidTokenBuilder{static{(0,t.__name)(this,"PieTokenBuilder")}constructor(){super(["pie","showData"])}},o=class extends t.AbstractMermaidValueConverter{static{(0,t.__name)(this,"PieValueConverter")}runCustomConverter(e,t,r){if("PIE_SECTION_LABEL"===e.name)return t.replace(/"/g,"").trim()}},s={parser:{TokenBuilder:(0,t.__name)(()=>new n,"TokenBuilder"),ValueConverter:(0,t.__name)(()=>new o,"ValueConverter")}};function c(e=r.EmptyFileSystem){let n=(0,i.inject)((0,a.createDefaultSharedCoreModule)(e),t.MermaidGeneratedSharedModule),o=(0,i.inject)((0,a.createDefaultCoreModule)({shared:n}),t.PieGeneratedModule,s);return n.ServiceRegistry.register(o),{shared:n,Pie:o}}(0,t.__name)(c,"createPieServices"),e.s(["PieModule",()=>s,"createPieServices",()=>c])},48056,e=>{"use strict";var t=e.i(3117),r=e.i(72724),a=e.i(46440),i=e.i(99238),n=class extends t.AbstractMermaidTokenBuilder{static{(0,t.__name)(this,"TreemapTokenBuilder")}constructor(){super(["treemap"])}},o=/classDef\s+([A-Z_a-z]\w+)(?:\s+([^\n\r;]*))?;?/,s=class extends t.AbstractMermaidValueConverter{static{(0,t.__name)(this,"TreemapValueConverter")}runCustomConverter(e,t,r){if("NUMBER2"===e.name)return parseFloat(t.replace(/,/g,""));if("SEPARATOR"===e.name)return t.substring(1,t.length-1);if("STRING2"===e.name)return t.substring(1,t.length-1);if("INDENTATION"===e.name)return t.length;if("ClassDef"===e.name){if("string"!=typeof t)return t;let e=o.exec(t);if(e)return{$type:"ClassDefStatement",className:e[1],styleText:e[2]||void 0}}}};function c(e){let t=e.validation.TreemapValidator,r=e.validation.ValidationRegistry;if(r){let e={Treemap:t.checkSingleRoot.bind(t)};r.register(e,t)}}(0,t.__name)(c,"registerValidationChecks");var l=class{static{(0,t.__name)(this,"TreemapValidator")}checkSingleRoot(e,t){let r;for(let a of e.TreemapRows)a.item&&(void 0===r&&void 0===a.indent?r=0:void 0===a.indent?t("error","Multiple root nodes are not allowed in a treemap.",{node:a,property:"item"}):void 0!==r&&r>=parseInt(a.indent,10)&&t("error","Multiple root nodes are not allowed in a treemap.",{node:a,property:"item"}))}},d={parser:{TokenBuilder:(0,t.__name)(()=>new n,"TokenBuilder"),ValueConverter:(0,t.__name)(()=>new s,"ValueConverter")},validation:{TreemapValidator:(0,t.__name)(()=>new l,"TreemapValidator")}};function m(e=r.EmptyFileSystem){let n=(0,i.inject)((0,a.createDefaultSharedCoreModule)(e),t.MermaidGeneratedSharedModule),o=(0,i.inject)((0,a.createDefaultCoreModule)({shared:n}),t.TreemapGeneratedModule,d);return n.ServiceRegistry.register(o),c(o),{shared:n,Treemap:o}}(0,t.__name)(m,"createTreemapServices"),e.s(["TreemapModule",()=>d,"createTreemapServices",()=>m])},30399,e=>{"use strict";var t=e.i(3117),r=e.i(99238),a=e.i(46440),i=e.i(72724),n=class extends t.AbstractMermaidTokenBuilder{static{(0,t.__name)(this,"GitGraphTokenBuilder")}constructor(){super(["gitGraph"])}},o={parser:{TokenBuilder:(0,t.__name)(()=>new n,"TokenBuilder"),ValueConverter:(0,t.__name)(()=>new t.CommonValueConverter,"ValueConverter")}};function s(e=i.EmptyFileSystem){let n=(0,r.inject)((0,a.createDefaultSharedCoreModule)(e),t.MermaidGeneratedSharedModule),c=(0,r.inject)((0,a.createDefaultCoreModule)({shared:n}),t.GitGraphGeneratedModule,o);return n.ServiceRegistry.register(c),{shared:n,GitGraph:c}}(0,t.__name)(s,"createGitGraphServices"),e.s(["GitGraphModule",()=>o,"createGitGraphServices",()=>s])},92815,e=>{"use strict";var t=e.i(3117),r=e.i(72724),a=e.i(46440),i=e.i(99238),n=class extends t.AbstractMermaidTokenBuilder{static{(0,t.__name)(this,"InfoTokenBuilder")}constructor(){super(["info","showInfo"])}},o={parser:{TokenBuilder:(0,t.__name)(()=>new n,"TokenBuilder"),ValueConverter:(0,t.__name)(()=>new t.CommonValueConverter,"ValueConverter")}};function s(e=r.EmptyFileSystem){let n=(0,i.inject)((0,a.createDefaultSharedCoreModule)(e),t.MermaidGeneratedSharedModule),c=(0,i.inject)((0,a.createDefaultCoreModule)({shared:n}),t.InfoGeneratedModule,o);return n.ServiceRegistry.register(c),{shared:n,Info:c}}(0,t.__name)(s,"createInfoServices"),e.s(["InfoModule",()=>o,"createInfoServices",()=>s])},49959,e=>{"use strict";var t=e.i(3117),r=e.i(72724),a=e.i(46440),i=e.i(99238),n=class extends t.AbstractMermaidTokenBuilder{static{(0,t.__name)(this,"RadarTokenBuilder")}constructor(){super(["radar-beta"])}},o={parser:{TokenBuilder:(0,t.__name)(()=>new n,"TokenBuilder"),ValueConverter:(0,t.__name)(()=>new t.CommonValueConverter,"ValueConverter")}};function s(e=r.EmptyFileSystem){let n=(0,i.inject)((0,a.createDefaultSharedCoreModule)(e),t.MermaidGeneratedSharedModule),c=(0,i.inject)((0,a.createDefaultCoreModule)({shared:n}),t.RadarGeneratedModule,o);return n.ServiceRegistry.register(c),{shared:n,Radar:c}}(0,t.__name)(s,"createRadarServices"),e.s(["RadarModule",()=>o,"createRadarServices",()=>s])},29969,e=>{"use strict";var t=e.i(3117),r=e.i(72724),a=e.i(46440),i=e.i(99238),n=class extends t.AbstractMermaidTokenBuilder{static{(0,t.__name)(this,"ArchitectureTokenBuilder")}constructor(){super(["architecture"])}},o=class extends t.AbstractMermaidValueConverter{static{(0,t.__name)(this,"ArchitectureValueConverter")}runCustomConverter(e,t,r){return"ARCH_ICON"===e.name?t.replace(/[()]/g,"").trim():"ARCH_TEXT_ICON"===e.name?t.replace(/["()]/g,""):"ARCH_TITLE"===e.name?t.replace(/[[\]]/g,"").trim():void 0}},s={parser:{TokenBuilder:(0,t.__name)(()=>new n,"TokenBuilder"),ValueConverter:(0,t.__name)(()=>new o,"ValueConverter")}};function c(e=r.EmptyFileSystem){let n=(0,i.inject)((0,a.createDefaultSharedCoreModule)(e),t.MermaidGeneratedSharedModule),o=(0,i.inject)((0,a.createDefaultCoreModule)({shared:n}),t.ArchitectureGeneratedModule,s);return n.ServiceRegistry.register(o),{shared:n,Architecture:o}}(0,t.__name)(c,"createArchitectureServices"),e.s(["ArchitectureModule",()=>s,"createArchitectureServices",()=>c])},88471,e=>{"use strict";var t=e.i(89066);e.s(["clone",()=>t.default])},89066,e=>{"use strict";var t=e.i(42038);e.s(["default",0,function(e){return(0,t.default)(e,4)}])},17782,e=>{"use strict";var t=e.i(84891);e.s(["forEach",()=>t.default])},85186,e=>{"use strict";var t=Object.prototype.hasOwnProperty;let r=function(e,r){return null!=e&&t.call(e,r)};var a=e.i(78978);e.s(["has",0,function(e,t){return null!=e&&(0,a.default)(e,t,r)}],85186)},53908,98545,44515,49205,e=>{"use strict";var t=e.i(82735),r=e.i(50266),a=e.i(69104),i=e.i(41338);let n=function(e,t){var r=-1,n=(0,i.default)(e)?Array(e.length):[];return(0,a.default)(e,function(e,a,i){n[++r]=t(e,a,i)}),n};e.s(["default",0,n],98545);var o=e.i(44071);let s=function(e,a){return((0,o.default)(e)?t.default:n)(e,(0,r.default)(a,3))};e.s(["default",0,s],44515),e.s(["map",0,s],53908);var c=/\s/;let l=function(e){for(var t=e.length;t--&&c.test(e.charAt(t)););return t};var d=/^\s+/,m=e.i(59110),u=e.i(16827),h=0/0,f=/^[-+]0x[0-9a-f]+$/i,p=/^0b[01]+$/i,$=/^0o[0-7]+$/i,g=parseInt;let y=function(e){if("number"==typeof e)return e;if((0,u.default)(e))return h;if((0,m.default)(e)){var t,r="function"==typeof e.valueOf?e.valueOf():e;e=(0,m.default)(r)?r+"":r}if("string"!=typeof e)return 0===e?e:+e;e=(t=e)?t.slice(0,l(t)+1).replace(d,""):t;var a=p.test(e);return a||$.test(e)?g(e.slice(2),a?2:8):f.test(e)?h:+e};var x=1/0;e.s(["default",0,function(e){return e?(e=y(e))===x||e===-x?(e<0?-1:1)*17976931348623157e292:e==e?e:0:0===e?e:0}],49205)},37557,e=>{"use strict";var t=e.i(49205);e.s(["default",0,function(e){var r=(0,t.default)(e),a=r%1;return r==r?a?r-a:r:0}])},92474,e=>{"use strict";var t=e.i(35287),r=e.i(44071),a=e.i(63615);e.s(["default",0,function(e){return"string"==typeof e||!(0,r.default)(e)&&(0,a.default)(e)&&"[object String]"==(0,t.default)(e)}])},33837,e=>{"use strict";var t=e.i(26881),r=e.i(8888),a=e.i(72778),i=e.i(48178),n=e.i(59110),o=e.i(77734);let s=function(e,t,s,c){if(!(0,n.default)(e))return e;t=(0,a.default)(t,e);for(var l=-1,d=t.length,m=d-1,u=e;null!=u&&++l<d;){var h=(0,o.default)(t[l]),f=s;if("__proto__"===h||"constructor"===h||"prototype"===h)break;if(l!=m){var p=u[h];void 0===(f=c?c(p,h,u):void 0)&&(f=(0,n.default)(p)?p:(0,i.default)(t[l+1])?[]:{})}(0,r.default)(u,h,f),u=u[h]}return e};e.s(["default",0,function(e,r,i){for(var n=-1,o=r.length,c={};++n<o;){var l=r[n],d=(0,t.default)(e,l);i(d,l)&&s(c,(0,a.default)(l,e),d)}return c}],33837)},69109,22030,e=>{"use strict";var t=e.i(61196);let r=function(e){return(null==e?0:e.length)?(0,t.default)(e,1):[]};e.s(["default",0,r],22030),e.s(["flatten",0,r],69109)},61378,e=>{"use strict";var t=e.i(90104),r=e.i(8986),a=e.i(27925),i=e.i(72585),n=Object.prototype,o=n.hasOwnProperty,s=(0,t.default)(function(e,t){e=Object(e);var s=-1,c=t.length,l=c>2?t[2]:void 0;for(l&&(0,a.default)(t[0],t[1],l)&&(c=1);++s<c;)for(var d=t[s],m=(0,i.default)(d),u=-1,h=m.length;++u<h;){var f=m[u],p=e[f];(void 0===p||(0,r.default)(p,n[f])&&!o.call(e,f))&&(e[f]=d[f])}return e});e.s(["defaults",0,s],61378)},77811,e=>{"use strict";var t=e.i(50266),r=e.i(41338),a=e.i(54069);e.s(["default",0,function(e){return function(i,n,o){var s=Object(i);if(!(0,r.default)(i)){var c=(0,t.default)(n,3);i=(0,a.default)(i),n=function(e){return c(s[e],e,s)}}var l=e(i,n,o);return l>-1?s[c?i[l]:l]:void 0}}])},35962,e=>{"use strict";var t=e.i(77811),r=e.i(53411),a=e.i(50266),i=e.i(37557),n=Math.max,o=(0,t.default)(function(e,t,o){var s=null==e?0:e.length;if(!s)return -1;var c=null==o?0:(0,i.default)(o);return c<0&&(c=n(s+c,0)),(0,r.default)(e,(0,a.default)(t,3),c)});e.s(["find",0,o],35962)},67168,e=>{"use strict";var t=e.i(44071);e.s(["isArray",()=>t.default])},21813,e=>{"use strict";e.s(["last",0,function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}],21813)},36405,e=>{"use strict";var t=RegExp("[\\u200d\ud800-\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");e.s(["default",0,function(e){return t.test(e)}])},1101,e=>{"use strict";var t=e.i(16827);e.s(["default",0,function(e,r,a){for(var i=-1,n=e.length;++i<n;){var o=e[i],s=r(o);if(null!=s&&(void 0===c?s==s&&!(0,t.default)(s):a(s,c)))var c=s,l=o}return l}])},9113,34904,e=>{"use strict";var t=e.i(1101);let r=function(e,t){return e<t};e.s(["default",0,r],34904);var a=e.i(10022);e.s(["default",0,function(e){return e&&e.length?(0,t.default)(e,a.default,r):void 0}],9113)},34825,e=>{"use strict";var t=e.i(3117),r=e.i(72724),a=e.i(46440),i=e.i(99238),n=class extends t.AbstractMermaidTokenBuilder{static{(0,t.__name)(this,"PacketTokenBuilder")}constructor(){super(["packet"])}},o={parser:{TokenBuilder:(0,t.__name)(()=>new n,"TokenBuilder"),ValueConverter:(0,t.__name)(()=>new t.CommonValueConverter,"ValueConverter")}};function s(e=r.EmptyFileSystem){let n=(0,i.inject)((0,a.createDefaultSharedCoreModule)(e),t.MermaidGeneratedSharedModule),c=(0,i.inject)((0,a.createDefaultCoreModule)({shared:n}),t.PacketGeneratedModule,o);return n.ServiceRegistry.register(c),{shared:n,Packet:c}}(0,t.__name)(s,"createPacketServices"),e.s(["PacketModule",()=>o,"createPacketServices",()=>s])},89590,e=>{"use strict";e.i(30399),e.i(92815),e.i(34825),e.i(11992),e.i(29969),e.i(49959),e.i(48056);var t=e.i(3117),r={},a={info:(0,t.__name)(async()=>{let{createInfoServices:t}=await e.A(39149);r.info=t().Info.parser.LangiumParser},"info"),packet:(0,t.__name)(async()=>{let{createPacketServices:t}=await e.A(68613);r.packet=t().Packet.parser.LangiumParser},"packet"),pie:(0,t.__name)(async()=>{let{createPieServices:t}=await e.A(56732);r.pie=t().Pie.parser.LangiumParser},"pie"),architecture:(0,t.__name)(async()=>{let{createArchitectureServices:t}=await e.A(34132);r.architecture=t().Architecture.parser.LangiumParser},"architecture"),gitGraph:(0,t.__name)(async()=>{let{createGitGraphServices:t}=await e.A(77605);r.gitGraph=t().GitGraph.parser.LangiumParser},"gitGraph"),radar:(0,t.__name)(async()=>{let{createRadarServices:t}=await e.A(6234);r.radar=t().Radar.parser.LangiumParser},"radar"),treemap:(0,t.__name)(async()=>{let{createTreemapServices:t}=await e.A(71400);r.treemap=t().Treemap.parser.LangiumParser},"treemap")};async function i(e,t){let i=a[e];if(!i)throw Error(`Unknown diagram type: ${e}`);r[e]||await i();let o=r[e].parse(t);if(o.lexerErrors.length>0||o.parserErrors.length>0)throw new n(o);return o.value}(0,t.__name)(i,"parse");var n=class extends Error{constructor(e){super(`Parsing failed: ${e.lexerErrors.map(e=>e.message).join("\n")} ${e.parserErrors.map(e=>e.message).join("\n")}`),this.result=e}static{(0,t.__name)(this,"MermaidParseError")}};e.s(["parse",()=>i])},2099,e=>{"use strict";function t(e,t){e.accDescr&&t.setAccDescription?.(e.accDescr),e.accTitle&&t.setAccTitle?.(e.accTitle),e.title&&t.setDiagramTitle?.(e.title)}(0,e.i(71206).__name)(t,"populateCommonDb"),e.s(["populateCommonDb",()=>t])},57387,e=>{"use strict";var t=e.i(71206),r=class{constructor(e){this.init=e,this.records=this.init()}static{(0,t.__name)(this,"ImperativeState")}reset(){this.records=this.init()}};e.s(["ImperativeState",()=>r])},42640,e=>{"use strict";var t=e.i(2099),r=e.i(57387),a=e.i(95923),i=e.i(80926),n=e.i(71206),o=e.i(89590);e.i(47716);var s=e.i(23685),c={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},l=i.defaultConfig_default.gitGraph,d=(0,n.__name)(()=>(0,a.cleanAndMerge)({...l,...(0,i.getConfig)().gitGraph}),"getConfig"),m=new r.ImperativeState(()=>{let e=d(),t=e.mainBranchName,r=e.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:r}]]),branches:new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}});function u(){return(0,a.random)({length:7})}function h(e,t){let r=Object.create(null);return e.reduce((e,a)=>{let i=t(a);return r[i]||(r[i]=!0,e.push(a)),e},[])}(0,n.__name)(u,"getID"),(0,n.__name)(h,"uniqBy");var f=(0,n.__name)(function(e){m.records.direction=e},"setDirection"),p=(0,n.__name)(function(e){n.log.debug("options str",e),e=(e=e?.trim())||"{}";try{m.records.options=JSON.parse(e)}catch(e){n.log.error("error while parsing gitGraph options",e.message)}},"setOptions"),$=(0,n.__name)(function(){return m.records.options},"getOptions"),g=(0,n.__name)(function(e){let t=e.msg,r=e.id,a=e.type,o=e.tags;n.log.info("commit",t,r,a,o),n.log.debug("Entering commit:",t,r,a,o);let s=d();r=i.common_default.sanitizeText(r,s),t=i.common_default.sanitizeText(t,s),o=o?.map(e=>i.common_default.sanitizeText(e,s));let l={id:r||m.records.seq+"-"+u(),message:t,seq:m.records.seq++,type:a??c.NORMAL,tags:o??[],parents:null==m.records.head?[]:[m.records.head.id],branch:m.records.currBranch};m.records.head=l,n.log.info("main branch",s.mainBranchName),m.records.commits.has(l.id)&&n.log.warn(`Commit ID ${l.id} already exists`),m.records.commits.set(l.id,l),m.records.branches.set(m.records.currBranch,l.id),n.log.debug("in pushCommit "+l.id)},"commit"),y=(0,n.__name)(function(e){let t=e.name,r=e.order;if(t=i.common_default.sanitizeText(t,d()),m.records.branches.has(t))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);m.records.branches.set(t,null!=m.records.head?m.records.head.id:null),m.records.branchConfig.set(t,{name:t,order:r}),v(t),n.log.debug("in createBranch")},"branch"),x=(0,n.__name)(e=>{let t=e.branch,r=e.id,a=e.type,o=e.tags,s=d();t=i.common_default.sanitizeText(t,s),r&&(r=i.common_default.sanitizeText(r,s));let l=m.records.branches.get(m.records.currBranch),h=m.records.branches.get(t),f=l?m.records.commits.get(l):void 0,p=h?m.records.commits.get(h):void 0;if(f&&p&&f.branch===t)throw Error(`Cannot merge branch '${t}' into itself.`);if(m.records.currBranch===t){let e=Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},e}if(void 0===f||!f){let e=Error(`Incorrect usage of "merge". Current branch (${m.records.currBranch})has no commits`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},e}if(!m.records.branches.has(t)){let e=Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},e}if(void 0===p||!p){let e=Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},e}if(f===p){let e=Error('Incorrect usage of "merge". Both branches have same head');throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},e}if(r&&m.records.commits.has(r)){let e=Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom id");throw e.hash={text:`merge ${t} ${r} ${a} ${o?.join(" ")}`,token:`merge ${t} ${r} ${a} ${o?.join(" ")}`,expected:[`merge ${t} ${r}_UNIQUE ${a} ${o?.join(" ")}`]},e}let $={id:r||`${m.records.seq}-${u()}`,message:`merged branch ${t} into ${m.records.currBranch}`,seq:m.records.seq++,parents:null==m.records.head?[]:[m.records.head.id,h||""],branch:m.records.currBranch,type:c.MERGE,customType:a,customId:!!r,tags:o??[]};m.records.head=$,m.records.commits.set($.id,$),m.records.branches.set(m.records.currBranch,$.id),n.log.debug(m.records.branches),n.log.debug("in mergeBranch")},"merge"),_=(0,n.__name)(function(e){let t=e.id,r=e.targetId,a=e.tags,o=e.parent;n.log.debug("Entering cherryPick:",t,r,a);let s=d();if(t=i.common_default.sanitizeText(t,s),r=i.common_default.sanitizeText(r,s),a=a?.map(e=>i.common_default.sanitizeText(e,s)),o=i.common_default.sanitizeText(o,s),!t||!m.records.commits.has(t)){let e=Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw e.hash={text:`cherryPick ${t} ${r}`,token:`cherryPick ${t} ${r}`,expected:["cherry-pick abc"]},e}let l=m.records.commits.get(t);if(void 0===l||!l)throw Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(o&&!(Array.isArray(l.parents)&&l.parents.includes(o)))throw Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let h=l.branch;if(l.type===c.MERGE&&!o)throw Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!r||!m.records.commits.has(r)){if(h===m.records.currBranch){let e=Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw e.hash={text:`cherryPick ${t} ${r}`,token:`cherryPick ${t} ${r}`,expected:["cherry-pick abc"]},e}let e=m.records.branches.get(m.records.currBranch);if(void 0===e||!e){let e=Error(`Incorrect usage of "cherry-pick". Current branch (${m.records.currBranch})has no commits`);throw e.hash={text:`cherryPick ${t} ${r}`,token:`cherryPick ${t} ${r}`,expected:["cherry-pick abc"]},e}let i=m.records.commits.get(e);if(void 0===i||!i){let e=Error(`Incorrect usage of "cherry-pick". Current branch (${m.records.currBranch})has no commits`);throw e.hash={text:`cherryPick ${t} ${r}`,token:`cherryPick ${t} ${r}`,expected:["cherry-pick abc"]},e}let s={id:m.records.seq+"-"+u(),message:`cherry-picked ${l?.message} into ${m.records.currBranch}`,seq:m.records.seq++,parents:null==m.records.head?[]:[m.records.head.id,l.id],branch:m.records.currBranch,type:c.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${l.id}${l.type===c.MERGE?`|parent:${o}`:""}`]};m.records.head=s,m.records.commits.set(s.id,s),m.records.branches.set(m.records.currBranch,s.id),n.log.debug(m.records.branches),n.log.debug("in cherryPick")}},"cherryPick"),v=(0,n.__name)(function(e){if(e=i.common_default.sanitizeText(e,d()),m.records.branches.has(e)){m.records.currBranch=e;let t=m.records.branches.get(m.records.currBranch);void 0!==t&&t?m.records.head=m.records.commits.get(t)??null:m.records.head=null}else{let t=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${e}")`);throw t.hash={text:`checkout ${e}`,token:`checkout ${e}`,expected:[`branch ${e}`]},t}},"checkout");function b(e,t,r){let a=e.indexOf(t);-1===a?e.push(r):e.splice(a,1,r)}function C(e){let t=e.reduce((e,t)=>e.seq>t.seq?e:t,e[0]),r="";e.forEach(function(e){e===t?r+="	*":r+="	|"});let a=[r,t.id,t.seq];for(let e in m.records.branches)m.records.branches.get(e)===t.id&&a.push(e);if(n.log.debug(a.join(" ")),t.parents&&2==t.parents.length&&t.parents[0]&&t.parents[1]){let r=m.records.commits.get(t.parents[0]);b(e,t,r),t.parents[1]&&e.push(m.records.commits.get(t.parents[1]))}else if(0==t.parents.length)return;else if(t.parents[0]){let r=m.records.commits.get(t.parents[0]);b(e,t,r)}C(e=h(e,e=>e.id))}(0,n.__name)(b,"upsert"),(0,n.__name)(C,"prettyPrintCommitHistory");var w=(0,n.__name)(function(){n.log.debug(m.records.commits),C([E()[0]])},"prettyPrint"),T=(0,n.__name)(function(){m.reset(),(0,i.clear)()},"clear"),k=(0,n.__name)(function(){return[...m.records.branchConfig.values()].map((e,t)=>null!==e.order&&void 0!==e.order?e:{...e,order:parseFloat(`0.${t}`)}).sort((e,t)=>(e.order??0)-(t.order??0)).map(({name:e})=>({name:e}))},"getBranchesAsObjArray"),B=(0,n.__name)(function(){return m.records.branches},"getBranches"),M=(0,n.__name)(function(){return m.records.commits},"getCommits"),E=(0,n.__name)(function(){let e=[...m.records.commits.values()];return e.forEach(function(e){n.log.debug(e.id)}),e.sort((e,t)=>e.seq-t.seq),e},"getCommitsArray"),L={commitType:c,getConfig:d,setDirection:f,setOptions:p,getOptions:$,commit:g,branch:y,merge:x,cherryPick:_,checkout:v,prettyPrint:w,clear:T,getBranchesAsObjArray:k,getBranches:B,getCommits:M,getCommitsArray:E,getCurrentBranch:(0,n.__name)(function(){return m.records.currBranch},"getCurrentBranch"),getDirection:(0,n.__name)(function(){return m.records.direction},"getDirection"),getHead:(0,n.__name)(function(){return m.records.head},"getHead"),setAccTitle:i.setAccTitle,getAccTitle:i.getAccTitle,getAccDescription:i.getAccDescription,setAccDescription:i.setAccDescription,setDiagramTitle:i.setDiagramTitle,getDiagramTitle:i.getDiagramTitle},P=(0,n.__name)((e,r)=>{for(let a of((0,t.populateCommonDb)(e,r),e.dir&&r.setDirection(e.dir),e.statements))A(a,r)},"populate"),A=(0,n.__name)((e,t)=>{let r={Commit:(0,n.__name)(e=>t.commit(S(e)),"Commit"),Branch:(0,n.__name)(e=>t.branch(R(e)),"Branch"),Merge:(0,n.__name)(e=>t.merge(G(e)),"Merge"),Checkout:(0,n.__name)(e=>t.checkout(I(e)),"Checkout"),CherryPicking:(0,n.__name)(e=>t.cherryPick(D(e)),"CherryPicking")}[e.$type];r?r(e):n.log.error(`Unknown statement type: ${e.$type}`)},"parseStatement"),S=(0,n.__name)(e=>({id:e.id,msg:e.message??"",type:void 0!==e.type?c[e.type]:c.NORMAL,tags:e.tags??void 0}),"parseCommit"),R=(0,n.__name)(e=>({name:e.name,order:e.order??0}),"parseBranch"),G=(0,n.__name)(e=>({branch:e.branch,id:e.id??"",type:void 0!==e.type?c[e.type]:void 0,tags:e.tags??void 0}),"parseMerge"),I=(0,n.__name)(e=>e.branch,"parseCheckout"),D=(0,n.__name)(e=>({id:e.id,targetId:"",tags:e.tags?.length===0?void 0:e.tags,parent:e.parent}),"parseCherryPicking"),O={parse:(0,n.__name)(async e=>{let t=await (0,o.parse)("gitGraph",e);n.log.debug(t),P(t,L)},"parse")},j=(0,i.getConfig2)(),V=j?.gitGraph,q=new Map,H=new Map,N=new Map,z=[],F=0,W="LR",K=(0,n.__name)(()=>{q.clear(),H.clear(),N.clear(),F=0,z=[],W="LR"},"clear"),U=(0,n.__name)(e=>{let t=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof e?e.split(/\\n|\n|<br\s*\/?>/gi):e).forEach(e=>{let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=e.trim(),t.appendChild(r)}),t},"drawText"),Y=(0,n.__name)(e=>{let t,r,a;return"BT"===W?(r=(0,n.__name)((e,t)=>e<=t,"comparisonFunc"),a=1/0):(r=(0,n.__name)((e,t)=>e>=t,"comparisonFunc"),a=0),e.forEach(e=>{let i="TB"===W||"BT"==W?H.get(e)?.y:H.get(e)?.x;void 0!==i&&r(i,a)&&(t=e,a=i)}),t},"findClosestParent"),X=(0,n.__name)(e=>{let t="",r=1/0;return e.forEach(e=>{let a=H.get(e).y;a<=r&&(t=e,r=a)}),t||void 0},"findClosestParentBT"),J=(0,n.__name)((e,t,r)=>{let a=r,i=r,n=[];e.forEach(e=>{let r=t.get(e);if(!r)throw Error(`Commit not found for key ${e}`);r.parents.length?i=Math.max(a=Z(r),i):n.push(r),ee(r,a)}),a=i,n.forEach(e=>{et(e,a,r)}),e.forEach(e=>{let r=t.get(e);if(r?.parents.length){let e=X(r.parents);(a=H.get(e).y-40)<=i&&(i=a);let t=q.get(r.branch).pos,n=a-10;H.set(r.id,{x:t,y:n})}})},"setParallelBTPos"),Q=(0,n.__name)(e=>{let t=Y(e.parents.filter(e=>null!==e));if(!t)throw Error(`Closest parent not found for commit ${e.id}`);let r=H.get(t)?.y;if(void 0===r)throw Error(`Closest parent position not found for commit ${e.id}`);return r},"findClosestParentPos"),Z=(0,n.__name)(e=>Q(e)+40,"calculateCommitPosition"),ee=(0,n.__name)((e,t)=>{let r=q.get(e.branch);if(!r)throw Error(`Branch not found for commit ${e.id}`);let a=r.pos,i=t+10;return H.set(e.id,{x:a,y:i}),{x:a,y:i}},"setCommitPosition"),et=(0,n.__name)((e,t,r)=>{let a=q.get(e.branch);if(!a)throw Error(`Branch not found for commit ${e.id}`);let i=a.pos;H.set(e.id,{x:i,y:t+r})},"setRootPosition"),er=(0,n.__name)((e,t,r,a,i,n)=>{if(n===c.HIGHLIGHT)e.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${i%8} ${a}-outer`),e.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${i%8} ${a}-inner`);else if(n===c.CHERRY_PICK)e.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${t.id} ${a}`),e.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${a}`),e.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${a}`),e.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${a}`),e.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${a}`);else{let o=e.append("circle");if(o.attr("cx",r.x),o.attr("cy",r.y),o.attr("r",t.type===c.MERGE?9:10),o.attr("class",`commit ${t.id} commit${i%8}`),n===c.MERGE){let n=e.append("circle");n.attr("cx",r.x),n.attr("cy",r.y),n.attr("r",6),n.attr("class",`commit ${a} ${t.id} commit${i%8}`)}n===c.REVERSE&&e.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${a} ${t.id} commit${i%8}`)}},"drawCommitBullet"),ea=(0,n.__name)((e,t,r,a)=>{if(t.type!==c.CHERRY_PICK&&(t.customId&&t.type===c.MERGE||t.type!==c.MERGE)&&V?.showCommitLabel){let i=e.append("g"),n=i.insert("rect").attr("class","commit-label-bkg"),o=i.append("text").attr("x",a).attr("y",r.y+25).attr("class","commit-label").text(t.id),s=o.node()?.getBBox();if(s&&(n.attr("x",r.posWithOffset-s.width/2-2).attr("y",r.y+13.5).attr("width",s.width+4).attr("height",s.height+4),"TB"===W||"BT"===W?(n.attr("x",r.x-(s.width+16+5)).attr("y",r.y-12),o.attr("x",r.x-(s.width+16)).attr("y",r.y+s.height-12)):o.attr("x",r.posWithOffset-s.width/2),V.rotateCommitLabel))if("TB"===W||"BT"===W)o.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),n.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{let e=-7.5-(s.width+10)/25*9.5,t=10+s.width/25*8.5;i.attr("transform","translate("+e+", "+t+") rotate(-45, "+a+", "+r.y+")")}}},"drawCommitLabel"),ei=(0,n.__name)((e,t,r,a)=>{if(t.tags.length>0){let i=0,n=0,o=0,s=[];for(let a of t.tags.reverse()){let t=e.insert("polygon"),c=e.append("circle"),l=e.append("text").attr("y",r.y-16-i).attr("class","tag-label").text(a),d=l.node()?.getBBox();if(!d)throw Error("Tag bbox not found");n=Math.max(n,d.width),o=Math.max(o,d.height),l.attr("x",r.posWithOffset-d.width/2),s.push({tag:l,hole:c,rect:t,yOffset:i}),i+=20}for(let{tag:e,hole:t,rect:i,yOffset:c}of s){let s=o/2,l=r.y-19.2-c;if(i.attr("class","tag-label-bkg").attr("points",`
      ${a-n/2-2},${l+2}  
      ${a-n/2-2},${l-2}
      ${r.posWithOffset-n/2-4},${l-s-2}
      ${r.posWithOffset+n/2+4},${l-s-2}
      ${r.posWithOffset+n/2+4},${l+s+2}
      ${r.posWithOffset-n/2-4},${l+s+2}`),t.attr("cy",l).attr("cx",a-n/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===W||"BT"===W){let o=a+c;i.attr("class","tag-label-bkg").attr("points",`
        ${r.x},${o+2}
        ${r.x},${o-2}
        ${r.x+10},${o-s-2}
        ${r.x+10+n+4},${o-s-2}
        ${r.x+10+n+4},${o+s+2}
        ${r.x+10},${o+s+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),t.attr("cx",r.x+2).attr("cy",o).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),e.attr("x",r.x+5).attr("y",o+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+a+")")}}}},"drawCommitTags"),en=(0,n.__name)(e=>{switch(e.customType??e.type){case c.NORMAL:return"commit-normal";case c.REVERSE:return"commit-reverse";case c.HIGHLIGHT:return"commit-highlight";case c.MERGE:return"commit-merge";case c.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),eo=(0,n.__name)((e,t,r,a)=>{let i={x:0,y:0};if(e.parents.length>0){let r=Y(e.parents);if(r){let n=a.get(r)??i;return"TB"===t?n.y+40:"BT"===t?(a.get(e.id)??i).y-40:n.x+40}}else if("TB"===t)return 30;else if("BT"===t)return(a.get(e.id)??i).y-40;return 0},"calculatePosition"),es=(0,n.__name)((e,t,r)=>{let a="BT"===W&&r?t:t+10,i="TB"===W||"BT"===W?a:q.get(e.branch)?.pos,n="TB"===W||"BT"===W?q.get(e.branch)?.pos:a;if(void 0===n||void 0===i)throw Error(`Position were undefined for commit ${e.id}`);return{x:n,y:i,posWithOffset:a}},"getCommitPosition"),ec=(0,n.__name)((e,t,r)=>{if(!V)throw Error("GitGraph config not found");let a=e.append("g").attr("class","commit-bullets"),i=e.append("g").attr("class","commit-labels"),o=30*("TB"===W||"BT"===W),s=[...t.keys()],c=V?.parallelCommits??!1,l=s.sort((0,n.__name)((e,r)=>{let a=t.get(e)?.seq,i=t.get(r)?.seq;return void 0!==a&&void 0!==i?a-i:0},"sortKeys"));"BT"===W&&(c&&J(l,t,o),l=l.reverse()),l.forEach(e=>{let n=t.get(e);if(!n)throw Error(`Commit not found for key ${e}`);c&&(o=eo(n,W,o,H));let s=es(n,o,c);if(r){let e=en(n),t=n.customType??n.type,r=q.get(n.branch)?.index??0;er(a,n,s,e,r,t),ea(i,n,s,o),ei(i,n,s,o)}"TB"===W||"BT"===W?H.set(n.id,{x:s.x,y:s.posWithOffset}):H.set(n.id,{x:s.posWithOffset,y:s.y}),(o="BT"===W&&c?o+40:o+40+10)>F&&(F=o)})},"drawCommits"),el=(0,n.__name)((e,t,r,a,i)=>{let o=("TB"===W||"BT"===W?r.x<a.x:r.y<a.y)?t.branch:e.branch,s=(0,n.__name)(e=>e.branch===o,"isOnBranchToGetCurve"),c=(0,n.__name)(r=>r.seq>e.seq&&r.seq<t.seq,"isBetweenCommits");return[...i.values()].some(e=>c(e)&&s(e))},"shouldRerouteArrow"),ed=(0,n.__name)((e,t,r=0)=>{let a=e+Math.abs(e-t)/2;if(r>5)return a;if(z.every(e=>Math.abs(e-a)>=10))return z.push(a),a;let i=Math.abs(e-t);return ed(e,t-i/5,r+1)},"findLane"),em=(0,n.__name)((e,t,r,a)=>{let i,n=H.get(t.id),o=H.get(r.id);if(void 0===n||void 0===o)throw Error(`Commit positions not found for commits ${t.id} and ${r.id}`);let s=el(t,r,n,o,a),l="",d="",m=0,u=0,h=q.get(r.branch)?.index;if(r.type===c.MERGE&&t.id!==r.parents[0]&&(h=q.get(t.branch)?.index),s){l="A 10 10, 0, 0, 0,",d="A 10 10, 0, 0, 1,",m=10,u=10;let e=n.y<o.y?ed(n.y,o.y):ed(o.y,n.y),r=n.x<o.x?ed(n.x,o.x):ed(o.x,n.x);"TB"===W?n.x<o.x?i=`M ${n.x} ${n.y} L ${r-m} ${n.y} ${d} ${r} ${n.y+u} L ${r} ${o.y-m} ${l} ${r+u} ${o.y} L ${o.x} ${o.y}`:(h=q.get(t.branch)?.index,i=`M ${n.x} ${n.y} L ${r+m} ${n.y} ${l} ${r} ${n.y+u} L ${r} ${o.y-m} ${d} ${r-u} ${o.y} L ${o.x} ${o.y}`):"BT"===W?n.x<o.x?i=`M ${n.x} ${n.y} L ${r-m} ${n.y} ${l} ${r} ${n.y-u} L ${r} ${o.y+m} ${d} ${r+u} ${o.y} L ${o.x} ${o.y}`:(h=q.get(t.branch)?.index,i=`M ${n.x} ${n.y} L ${r+m} ${n.y} ${d} ${r} ${n.y-u} L ${r} ${o.y+m} ${l} ${r-u} ${o.y} L ${o.x} ${o.y}`):n.y<o.y?i=`M ${n.x} ${n.y} L ${n.x} ${e-m} ${l} ${n.x+u} ${e} L ${o.x-m} ${e} ${d} ${o.x} ${e+u} L ${o.x} ${o.y}`:(h=q.get(t.branch)?.index,i=`M ${n.x} ${n.y} L ${n.x} ${e+m} ${d} ${n.x+u} ${e} L ${o.x-m} ${e} ${l} ${o.x} ${e-u} L ${o.x} ${o.y}`)}else l="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",m=20,u=20,"TB"===W?(n.x<o.x&&(i=r.type===c.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${o.y-m} ${l} ${n.x+u} ${o.y} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${o.x-m} ${n.y} ${d} ${o.x} ${n.y+u} L ${o.x} ${o.y}`),n.x>o.x&&(l="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",m=20,u=20,i=r.type===c.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${o.y-m} ${d} ${n.x-u} ${o.y} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${o.x+m} ${n.y} ${l} ${o.x} ${n.y+u} L ${o.x} ${o.y}`),n.x===o.x&&(i=`M ${n.x} ${n.y} L ${o.x} ${o.y}`)):"BT"===W?(n.x<o.x&&(i=r.type===c.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${o.y+m} ${d} ${n.x+u} ${o.y} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${o.x-m} ${n.y} ${l} ${o.x} ${n.y-u} L ${o.x} ${o.y}`),n.x>o.x&&(l="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",m=20,u=20,i=r.type===c.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${o.y+m} ${l} ${n.x-u} ${o.y} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${o.x-m} ${n.y} ${l} ${o.x} ${n.y-u} L ${o.x} ${o.y}`),n.x===o.x&&(i=`M ${n.x} ${n.y} L ${o.x} ${o.y}`)):(n.y<o.y&&(i=r.type===c.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${o.x-m} ${n.y} ${d} ${o.x} ${n.y+u} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${n.x} ${o.y-m} ${l} ${n.x+u} ${o.y} L ${o.x} ${o.y}`),n.y>o.y&&(i=r.type===c.MERGE&&t.id!==r.parents[0]?`M ${n.x} ${n.y} L ${o.x-m} ${n.y} ${l} ${o.x} ${n.y-u} L ${o.x} ${o.y}`:`M ${n.x} ${n.y} L ${n.x} ${o.y+m} ${d} ${n.x+u} ${o.y} L ${o.x} ${o.y}`),n.y===o.y&&(i=`M ${n.x} ${n.y} L ${o.x} ${o.y}`));if(void 0===i)throw Error("Line definition not found");e.append("path").attr("d",i).attr("class","arrow arrow"+h%8)},"drawArrow"),eu=(0,n.__name)((e,t)=>{let r=e.append("g").attr("class","commit-arrows");[...t.keys()].forEach(e=>{let a=t.get(e);a.parents&&a.parents.length>0&&a.parents.forEach(e=>{em(r,t.get(e),a,t)})})},"drawArrows"),eh=(0,n.__name)((e,t)=>{let r=e.append("g");t.forEach((e,t)=>{let a=t%8,i=q.get(e.name)?.pos;if(void 0===i)throw Error(`Position not found for branch ${e.name}`);let n=r.append("line");n.attr("x1",0),n.attr("y1",i),n.attr("x2",F),n.attr("y2",i),n.attr("class","branch branch"+a),"TB"===W?(n.attr("y1",30),n.attr("x1",i),n.attr("y2",F),n.attr("x2",i)):"BT"===W&&(n.attr("y1",F),n.attr("x1",i),n.attr("y2",30),n.attr("x2",i)),z.push(i);let o=U(e.name),s=r.insert("rect"),c=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);c.node().appendChild(o);let l=o.getBBox();s.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-l.width-4-30*(V?.rotateCommitLabel===!0)).attr("y",-l.height/2+8).attr("width",l.width+18).attr("height",l.height+4),c.attr("transform","translate("+(-l.width-14-30*(V?.rotateCommitLabel===!0))+", "+(i-l.height/2-1)+")"),"TB"===W?(s.attr("x",i-l.width/2-10).attr("y",0),c.attr("transform","translate("+(i-l.width/2-5)+", 0)")):"BT"===W?(s.attr("x",i-l.width/2-10).attr("y",F),c.attr("transform","translate("+(i-l.width/2-5)+", "+F+")")):s.attr("transform","translate(-19, "+(i-l.height/2)+")")})},"drawBranches"),ef=(0,n.__name)(function(e,t,r,a,i){return q.set(e,{pos:t,index:r}),t+=50+40*!!i+("TB"===W||"BT"===W?a.width/2:0)},"setBranchPosition"),ep={parser:O,db:L,renderer:{draw:(0,n.__name)(function(e,t,r,o){if(K(),n.log.debug("in gitgraph renderer",e+"\n","id:",t,r),!V)throw Error("GitGraph config not found");let c=V.rotateCommitLabel??!1,l=o.db;N=l.getCommits();let d=l.getBranchesAsObjArray();W=l.getDirection();let m=(0,s.select)(`[id="${t}"]`),u=0;d.forEach((e,t)=>{let r=U(e.name),a=m.append("g"),i=a.insert("g").attr("class","branchLabel"),n=i.insert("g").attr("class","label branch-label");n.node()?.appendChild(r);let o=r.getBBox();u=ef(e.name,u,t,o,c),n.remove(),i.remove(),a.remove()}),ec(m,N,!1),V.showBranches&&eh(m,d),eu(m,N),ec(m,N,!0),a.utils_default.insertTitle(m,"gitTitleText",V.titleTopMargin??0,l.getDiagramTitle()),(0,i.setupGraphViewbox2)(void 0,m,V.diagramPadding,V.useMaxWidth)},"draw")},styles:(0,n.__name)(e=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${e["gitBranchLabel"+t]}; }
        .commit${t} { stroke: ${e["git"+t]}; fill: ${e["git"+t]}; }
        .commit-highlight${t} { stroke: ${e["gitInv"+t]}; fill: ${e["gitInv"+t]}; }
        .label${t}  { fill: ${e["git"+t]}; }
        .arrow${t} { stroke: ${e["git"+t]}; }
        `).join("\n")}

  .branch {
    stroke-width: 1;
    stroke: ${e.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelColor};}
  .commit-label-bkg { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${e.tagLabelFontSize}; fill: ${e.tagLabelColor};}
  .tag-label-bkg { fill: ${e.tagLabelBackground}; stroke: ${e.tagLabelBorder}; }
  .tag-hole { fill: ${e.textColor}; }

  .commit-merge {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }
  .commit-reverse {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${e.textColor};
  }
`,"getStyles")};e.s(["diagram",()=>ep])},39149,e=>{e.v(t=>Promise.all(["static/chunks/8f8ffc94517fa46d.js"].map(t=>e.l(t))).then(()=>t(85691)))},68613,e=>{e.v(t=>Promise.all(["static/chunks/6370363af148353a.js"].map(t=>e.l(t))).then(()=>t(7398)))},56732,e=>{e.v(t=>Promise.all(["static/chunks/512bb129be1beca5.js"].map(t=>e.l(t))).then(()=>t(73042)))},34132,e=>{e.v(t=>Promise.all(["static/chunks/45f91591becf20cf.js"].map(t=>e.l(t))).then(()=>t(68241)))},77605,e=>{e.v(t=>Promise.all(["static/chunks/fff814bfadd98faa.js"].map(t=>e.l(t))).then(()=>t(59737)))},6234,e=>{e.v(t=>Promise.all(["static/chunks/a6842f1cdf5ef8ca.js"].map(t=>e.l(t))).then(()=>t(14693)))},71400,e=>{e.v(t=>Promise.all(["static/chunks/2c59ea1b8d376246.js"].map(t=>e.l(t))).then(()=>t(43892)))}]);